/// @file
///
/// @brief Halton low-discrepancy sequence 2-dimension generator.
///
/// @author Oek, KLRP '05.03.13
///
/// Copyright &copy; INTEGRA, Inc., 2005.

#ifndef _KLRP_HALTONGEN2D_HPP_
#define _KLRP_HALTONGEN2D_HPP_

INTEGRA_NAMESPACE_START

/**

@class HaltonGen2D  math/haltongen2d.hpp

@brief Halton low-discrepancy sequence 2D generator.

Halton algorithm for low-discrepancy 2D sequence.
The proper usage of Halton gnerator provides generation of
coherent samples in Quasi- Monte Carlo methods. The generator
uses double accuracy for sequence number representation.

**/

class HaltonGen2D
  {
  public:
    /// @name Constructor/Destructor
    //@{
    /// Constructor of multidimension quasi-random sequences.
    inline HaltonGen2D();
    /// Destructor.
    inline ~HaltonGen2D();
    //@}

  public:
    /// Set span and length of quasi-random sequence. 
    /// @note It has to be 2^n*3^m.
    inline void SetLength(int span, int length);
    /// Generate next quasi-random number in the sequence.
    inline void GetNext(double &x, double &y);

  private:
    /// Current index of quasi-random sequence.
    int idx;
    /// Span between coherent indices.
    int span;
    /// Length of complete sequence.
    int length;
    /// Length of complete sequence increment.
    int increment;
    }; // class HaltonGen2D


//////////////////////////////////////////////////////////////////////////////
/// Default constructor.
HaltonGen2D::HaltonGen2D() : idx(0), length(0)
  { 
  }

//////////////////////////////////////////////////////////////////////////////
/// Destructor.
HaltonGen2D::~HaltonGen2D()
  { 
  }

//////////////////////////////////////////////////////////////////////////////
/// Set span and length of quasi-random sequence.
/// @param[in] span The span between coherent indices.
/// @note Span has to be 2^n*3^m.
/// @param[in] length The length of complete sequence.
/// @note The length of complete sequence must be 2^i*3^i*span.
void HaltonGen2D::SetLength(int span, int length)
  {
  Assert(span > 0);
  Assert(length >= span);
  idx = this->length;  // set first index in new sequence
  this->span = span;
  this->length = length;
  increment = length - idx;
  }

//////////////////////////////////////////////////////////////////////////////
/// Generate next 2D vector in quasi-random sequence.
/// Numbers are generated by coherent series.
/// @return Quasi-random 2D vector.
void HaltonGen2D::GetNext(double &x, double &y)
  {
  double fraction = 1.;
  double dvalue = 0.;
  // get current index in the sequence
  int i = idx;
  do // and generate x random for base 2
    {
    dvalue += (fraction /= 2.) * (i % 2);
    } 
  while ((i /= 2) != 0);

  Assert(i == 0);
  Assert(dvalue >= 0. && dvalue < 1.);
  x = dvalue - (int)dvalue;

  fraction = 1.;
  dvalue = 0.;
  i = idx;
  do // and generate y random for base 3
    {
    dvalue += (fraction /= 3.) * (i % 3);
    } 
  while ((i /= 3) != 0);
  Assert(i == 0);
  Assert(dvalue >= 0. && dvalue < 1.);
  y = dvalue - (int)dvalue;

  // set index to next coherent number in the sequence
  idx += span;
  if (idx >= length)
    idx -= increment - 1;
  }

INTEGRA_NAMESPACE_END
#endif  // _KLRP_HALTONGEN2D_HPP_
